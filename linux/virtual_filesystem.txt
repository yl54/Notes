virtual filesystem

basics
- flexible mounting of differently formatted disks
    - q: what does mounting + formatting mean?
- put lots of info on the kernel to support operations by filesystems
    - q: difference between virtual vs real filesystem?
- main file types
    - files
    - directories
    - links

definition
- a kernel software layer that handles system calls to a standard UNIX filesystem
- higher programs don't need to worry about interaction between filesystems
- example: cp between a MS-DOS and a Ext2 is ok

main classes of VFS
- disk based filesystems
- network filesystems
- special filesystems

UNIX directories
- root is "/"
- other filesystems can be mounted on subdirectories of root
- you can hide files by mounting a filesytem on a directory
    - q: what does this mean

file model
- can represent all filesystems
- model should have minimal overhead
- some have directories as files, some have directories not as files
- linux kernel uses function pointers to pick proper handling per filesystem
    - read -> sys_read -> file->f_op
    - same for write and other stuff
- file represented by file data structure in kernel memory
    - kind of OOP, but not in OOP language
- File Allocation Table (FAT)
    - another type of filesystem
    - store position of each file in directory tree
    - directories are not files
    - linux implementations need to be constructed dynamically
    - only exist in memory

common file model 
- superblock
    - info about mounted filesystem
    - its usually a filesystem control block stored on disk
- inode
    - general info about a file
    - a file control block stored on disk
    - inode number is the unique number
- file
    - interaction between open file and process
    - only exists in kernel memory while process is keeping the file open
- dentry
    - info about linking of directory entry to corresponding file
    - stored on disk

how processes interact with objects
- 3 processes + 1 file + 2 hard links
- 3 processes interact with 3 file objects
- file objects refer to respective dentries
- 2 dentries exist, 1 per hard link
- 1 inode object 
- 1 superblock object
- inode and superblock refer to disk

dentry cache
- speed up translation from file pathname to inode of last pathname component
- disk cache: keep data in RAM vs disk
- q: how often are they hitting these files? Is it that often to where a cache would be super useful?
- disk vs hardware vs memory cache
    - hardware is fast static RAM vs slower dynamic RAM
    - memory cache exists to bypass kernel memory allocator
    - disk cache is stuff on memory rather than disk
- page cache is one example of disk cache

data structures
superblock
- individual super block has a semaphore (why)
- has list of all inodes
    - list that exists
    - list to be written to disk
- superblock objects in a circular doubly list (why)
- list has a spin lock
- info duplicated in memory and disk for superblock 
    - may lead to desync
    - dirty flag to indicate if diffs exist
    - periodic copy to disk
- superblock can read the inode
- basically the function are about interacting with inodes
- s_fs_info points to a struct about a specific filesystem
- q: how many superblocks are in the list?

inode
- everything needed by filesystem here
- filename is casually assigned label
- inode unique to file, same as long as file exists
- q: why a list to describe the inode's current state?
- has a dirty flag as well
- i/o transfer has a lock
- 3 different inode lists
    - valid unused
    - dirty list
    - in use inodes
- there is an inode hashtable
    - speed up search for inode when kernel
    - need inode number and address of superblock 
    - collisions are a thing
- inode operations
    - links (q: what are links)
- has a default constructor/initializer called alloc_inode
    - everywhere in file system specific code
    - uses inode_init_always to init the inode

file object
- q: is this the file descriptor or something different?
- describes how a process interacts with a file that it opened
- no corresponding image on disk
    - no need for a dirty field
- file pointer
    - current position in the file where the next operation takes place
        - q: what types of operations is this about?
- file objects allocated via a slab cache
- superblocks also store a list of file objects
    - files of different filesystems are in different lists
- f_count: number of processes using the file object
- inode holds pointers to file operations
    - vfs initializes f_op for file object with the address in the inode

dentry
- VFS considers each directory a file that contains a list of files + other directories
- directory read into memory and transformed into a dentry
- kernel creates a dentry for each process lookup
    - i.e for /tmp/ffff, a dentry for /, /tmp, and /tmp/ffff
- modes
    - free
    - unused
    - in use
    - negative
- d_op = dentry operations
- in use -> negative
    - last hard link to file is deleted
    - dentry object moved to the LRU

dentry cache
- takes time to read a directory from disk and create dentry object
    - q: how often does this occur?
- repeated access of a single file
- keep dentry objects in memory
- cache includes
    - set of dentry objects in use, unused, negative
    - hash table to get dentry object
        - collisions resolution is a list
- also acts as controller for an inode cache
    - unused dentries are still in cache
    - those inodes don't get discarded
- dentries put in a least recently used list
    - sorted by time of insertion
    - kernel removes the older dentries
- put negative dentries at the end of the LRU list
- dcache_lock is spin lock
- seqlock for race conditions (q: what is a seqlock?)

file system types
- 
