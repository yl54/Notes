chapter 3 - system mechanisms

p 85
trap dispatching
- basics
    - interrupts + exceptions are operating system conditions to divert the processor to code outside of normal control flow
    - either hardware or software can detect them
    - trap
        - processor's mechanism to capture a executing thread when an exception or interrupt occurs
        - transfer control to fixed location in OS
        - control is given to trap handler, some function specific to the handler
    - interrupts vs exceptions
        - interrupt    
            - asynchronous event, unrelated to what processor is executing 
            - generated by i/o devices, processor clocks, timers
            - can be enabled/disabled
        - exception
            - synchronous condition that results from execution of particular instruction
            - memory access violations, certain debugger instructions, divide-by-zero
- handling traps
    - trap frame
        - created on kernel stack of interrupted thread
        - store execution state of thread
        - subset of a thread's complete context
    - how a machine reacts when it occurs
        - processor records machine state so that maybe it can return if need be
        - user mode threads get trapped into thread's kernel mode stack
        - windows creates trap frame on kernel stack of interrupted thread
    - pre-installed trap handlers
        - device interrupt
            - kernel interrupt trap handler transfers control to interrupt service routine defined by device driver for the respective device
        - kernel handlers for unexpected errors
        - system service interrupt gets handled by a system service function

interrupt dispatching
- basics
    - hardware generated interrupts 
        - usually originate from I/O devices
        - hardware wants to notify the processor when they need service
    - interrupt driven devices allow OS to get maximum use of processor by overlapping central processing with I/O operations
        - Q: what does this mean? does it mean that cpu cycles are not wasted?
    - examples
        - pointing devices
        - printers
        - keyboards
        - disk drives
        - network cards
    - system software can generate interrupts as well
    - interrupt trap handlers 
        - device drivers supply interrupt service routines serivce device interrupts
        - kernel provides interrupt handling for other types of interruptes
    - interrupt dispatch table
        - basically a function pointer table
        - each function is assigned some index/enum
        - interrupt controller will query it for info
        - at boot time, Windows will fill it with pointers to kernel routines that handle each interrupt/exception
        - windows allows for 256 entries
            - dependent on interrupt controller the machine uses
    - hardware interrupt processing
        - external I/O interrupts come into one of the lines of an interrupt controller
            - Q: what is an interrupt controller?
        - controller interrupts processor on a single line
        - when processor is interrupted, queries controller to get interrupt request
        - interrupt controller translates the request to an interrupt number
        - number is an index to the interrupt dispatch table
        - controller transfers control to appropriate routine 
    - processors have different tables, if appropriate to run different ones
        - example
            - multiprocessor system
            - each processor recieve the clock interrupt
            - only one processor updates the system clock in response to interrupt
        - some system configs require that a particular processor handle certain device interrupts
- x86 interrupt controllers
    - common interrupt controllers
        - i8259A Programmable Interrupt Controller (PIC)
        - i82489 Advanced Programmable Interrupt Controller (APIC)
    - most new computers have an APIC
    - PIC
        - PIC is with original IBM PC
        - has like 8 interrupt lines
        - uniprocessor
        - can also be configured to have a slave, so 7 + 1 (reserved for slave) + 8
    - APIC 
        - works with multiprocessor systems
        - has 256 interrupt lines
        - do support PIC compat mode with 15 interrupts
        - consists of several components
            - I/O APIC that recieves interrupts from devices
            - local APICs that recieve interrupts from the I/O APIC on the bus and interrupt the CPU associated with
            - i8259A compatible interrupt controller that translates APIC input to PIC equivalent signals
        - can be multiple I/O APICs 
            - motherboards have core logic that sits between them and processors
            - logic responsible for implementing routing algorithms to balance device interrupt load across processors and attempt to take advantage of locality
            - i.e deliver device interrupts to processor that fielded a previous interrupt of same kind
            - routing algorithms could be fixed too
    - x64 controllers
        - x64 is compat with x86 OS
        - x64 systems must provide same interrupt controllers as x86
    - Q: why all of the different types of interrupt controllers? is it because they are working with different hardware?
- software interrupt request level
    - interrupt prioritization exists too
    - windows imposes interrupt request levels
        - kernel represents levels as integers from 0 to 31 on x86, 0 to 15 on x64
        - higher number = higher priority
        - levels 3+ are hardware interrupts
            - highest involve power, clock, critical services
        - levels 1, 2 ares software interrupts
        - level 0 is normal thread execution 
    - how they are serviced
        - interrupts serviced in priority order
        - when interrupt occurs, processor saves interrupted thread's state
        - trap dispatcher raises interrupt request level and call the interrupt service routine
        - after its done, interrupt dispatcher lowers request level to original level
        - dispatcher loads saved machine state
        - interrupted thread resumes executing where it left off
        - when kernel lowers IRQL, lower priority interrupts that were masked might materialize.
            - Q: what is a masked interrupt?


        
